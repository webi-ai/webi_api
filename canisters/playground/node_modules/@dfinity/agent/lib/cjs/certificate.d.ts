import { Buffer } from 'buffer/';
import { Agent, ReadStateResponse } from './agent';
export declare type HashTree = [0] | [1, HashTree, HashTree] | [2, ArrayBuffer, HashTree] | [3, ArrayBuffer] | [4, ArrayBuffer];
/**
 * Make a human readable string out of a hash tree.
 * @param tree
 */
export declare function hashTreeToString(tree: HashTree): string;
export declare class Certificate {
    private _agent;
    private readonly cert;
    private verified;
    private _rootKey;
    constructor(response: ReadStateResponse, _agent?: Agent);
    lookupEx(path: Array<ArrayBuffer | string>): ArrayBuffer | undefined;
    lookup(path: Buffer[]): Buffer | undefined;
    verify(): Promise<boolean>;
    fetchRootKey(): Promise<void>;
    private _checkDelegation;
}
/**
 * @param t
 */
export declare function reconstruct(t: HashTree): Promise<Buffer>;
/**
 *
 * @param path
 * @param tree
 */
export declare function lookupPathEx(path: Array<ArrayBuffer | string>, tree: HashTree): ArrayBuffer | undefined;
/**
 * @param path
 * @param tree
 */
export declare function lookup_path(path: Buffer[], tree: HashTree): Buffer | undefined;
