import {
  Actor,
  HttpAgent
} from "./_snowpack/pkg/@dfinity/agent.js";
export function gql(strings) {
  return strings.join("");
}
export function sudograph(options) {
  const queryFunctionName = options.queryFunctionName ?? "graphql_query";
  const mutationFunctionName = options.mutationFunctionName ?? "graphql_mutation";
  const idlFactory = ({IDL}) => {
    return IDL.Service({
      [queryFunctionName]: IDL.Func([IDL.Text, IDL.Text], [IDL.Text], ["query"]),
      [mutationFunctionName]: IDL.Func([IDL.Text, IDL.Text], [IDL.Text], [])
    });
  };
  const canisterId = options.canisterId;
  return {
    query: async (queryString, variables = {}) => {
      const agent = new HttpAgent({
        identity: options.identity
      });
      await agent.fetchRootKey();
      const graphqlActor = Actor.createActor(idlFactory, {
        agent,
        canisterId
      });
      const result = await graphqlActor[queryFunctionName](queryString, JSON.stringify(variables));
      const resultJSON = JSON.parse(result);
      return resultJSON;
    },
    mutation: async (mutationString, variables = {}) => {
      const agent = new HttpAgent({
        identity: options.identity
      });
      await agent.fetchRootKey();
      const graphqlActor = Actor.createActor(idlFactory, {
        agent,
        canisterId
      });
      const result = await graphqlActor[mutationFunctionName](mutationString, JSON.stringify(variables));
      const resultJSON = JSON.parse(result);
      return resultJSON;
    }
  };
}
